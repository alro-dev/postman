{
	"info": {
		"_postman_id": "de420e8f-8424-41da-8cd2-3a9b7672c2af",
		"name": "JSON Placeholder -  kurs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24062456"
	},
	"item": [
		{
			"name": "GET  Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "userId",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should verify response status code\", () => {\r",
							"    console.log(pm.response)\r",
							"    //pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404])\r",
							"    pm.expect(pm.response.code).to.be.a(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"should verify response time\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.lessThan(700)\r",
							"})\r",
							"\r",
							"pm.test(\"should verify response status\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"    pm.expect(pm.response.status).to.be.a(\"string\");\r",
							"})\r",
							"\r",
							"pm.test(\"should verify post id\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    //console.log(responseBody[0].id);\r",
							"    pm.expect(responseBody[0].id).to.eql(1);\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify length of name\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody[1].name).to.have.lengthOf(41);\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response email\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody[1].email).to.include(\"@\");\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify all response email\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.map(obiekt => {\r",
							"        //console.log(obiekt.email)\r",
							"        pm.expect(obiekt.email).to.include(\"@\");\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify content type response\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify connection response\", () => {\r",
							"    pm.response.to.have.header(\"Connection\");\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify content type value\", () => {\r",
							"    //console.log(pm.response.headers.get(\"Content-Type\"))\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST comment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1,\r\n    \"id\": 501,\r\n    \"title\": \"hello world\",\r\n    \"body\": \"hello world,\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Global\", () => {\r",
							"//     const expectedTitle = pm.globals.get(\"postTitle\");\r",
							"//     //console.log(\"Z testu: \" + expectedTitle);\r",
							"//     const responseBody = pm.response.json();\r",
							"//     pm.expect(responseBody.title).to.eql(expectedTitle);\r",
							"// })\r",
							"\r",
							"// pm.test(\"Collection\", () => {\r",
							"//     const expectedUrl = pm.collectionVariables.get(\"baseUrl\");\r",
							"//     //console.log(expectedUrl);\r",
							"// })\r",
							"\r",
							"// pm.test(\"Environments\", () => {\r",
							"// const expectedUsername = pm.environment.get(\"username\");\r",
							"// console.log(expectedUsername)\r",
							"// })\r",
							"\r",
							"// pm.test(\"Set Global\", () => {\r",
							"//     pm.globals.set(\"samochod\", \"Ford\");\r",
							"// })\r",
							"\r",
							"// pm.test(\"Set Collection\", () => {\r",
							"//     pm.collectionVariables.set(\"samochod\", \"Toyota\");\r",
							"// })\r",
							"\r",
							"// pm.test(\"Set Environments\", () => {\r",
							"//     pm.environment.set(\"samochod\", \"Fiat\");\r",
							"// })\r",
							"\r",
							"pm.test(\"Unset Global\", () => {\r",
							"    pm.globals.unset(\"samochod\")\r",
							"})\r",
							"\r",
							"pm.test(\"Unset Collection\", () => {\r",
							"    pm.collectionVariables.unset(\"samochod\")\r",
							"})\r",
							"\r",
							"pm.test(\"Unset Environments\", () => {\r",
							"    pm.environment.unset(\"samochod\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userID}},\r\n    \"id\": 1625,\r\n    \"title\": \"{{postTitle}}\",\r\n    \"body\": \"{{postBody}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// function wyswietlNapis() {\r",
							"//     console.log(\"Jestem skryptem wykonywanym przed zapytaniem\")\r",
							"// }\r",
							"\r",
							"// wyswietlNapis();\r",
							"\r",
							"function generatorEmail() {\r",
							"    const randomNumbers = Math.floor(Math.random() * (1000000000 - 1) + 1);\r",
							"    const randomEmail = \"test\" + randomNumbers + \"@example.com\";\r",
							"    pm.globals.set(\"randomEmail\", randomEmail);\r",
							"}\r",
							"\r",
							"generatorEmail();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function wyswietlNapis2() {\r",
							"    console.log(\"Jestem skryptem wykonywanym z Tests\")\r",
							"}\r",
							"\r",
							"wyswietlNapis2();\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"Jan Nowak\",\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"address\": {\r\n        \"street\": \"Kulas Light\",\r\n        \"suite\": \"Apt. 556\",\r\n        \"city\": \"Gwenborough\",\r\n        \"zipcode\": \"92998-3874\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    }\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE user",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "14",
			"type": "string"
		}
	]
}